# main.py

import asyncio
from datetime import date
from telethon.sync import TelegramClient
from telethon.sessions import StringSession

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã ---
from components import config
from components import database_manager as db
from components import telegram_processor
# üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
from components import session_manager 

# --- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
async def initialize_first_run_of_day(client):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è.
    """
    print("\n--- üåÖ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö –î–ù–Ø: –†–ï–ñ–ò–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ---\n")
    target_chats = db.get_target_chats()
    if not target_chats:
        print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    for chat_info in target_chats:
        chat_id = chat_info['chat_id']
        processing_id = chat_id
        print(f"‚ñ∂Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞: {chat_id}")
        try:
            entity = await client.get_entity(chat_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º, —Ä–∞–±–æ—Ç–∞–µ–º —Å —á–∞—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                print(f"   ‚úÖ –ö–∞–Ω–∞–ª {chat_id} —Å–≤—è–∑–∞–Ω —Å —á–∞—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {processing_id}.")
                entity_to_read = await client.get_entity(processing_id)
            else:
                entity_to_read = entity

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º ID –≤ –±–∞–∑–µ
            async for last_message in client.iter_messages(entity_to_read, limit=1):
                db.update_last_message_id(processing_id, last_message.id)
                break
            else:
                print(f"   ‚ö†Ô∏è –í —á–∞—Ç–µ {processing_id} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")

    db.update_initialization_date()
    print("\n--- ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–∏.
    """
    if not db.is_agent_active():
        print("‚ÑπÔ∏è –ê–≥–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    # --- üöÄ –ù–ê–î–Å–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–ï–ô ---
    session_string = db.get_session_string()
    client = None

    # –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    if session_string:
        print("‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        client = TelegramClient(
            StringSession(session_string), 
            config.TELEGRAM_API_ID, 
            config.TELEGRAM_API_HASH,
            device_model="HR Vision Agent",
            system_version="Windows 11",
            app_version="1.0.0"
        )
        try:
            await client.connect()
            if not await client.is_user_authorized():
                print("‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.")
                session_string = None
                await client.disconnect()
                client = None
            else:
                print("‚úÖ –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {e}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è.")
            session_string = None
            if client and client.is_connected():
                await client.disconnect()
            client = None

    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
    if not session_string:
        session_string = await session_manager.create_new_session()
        if not session_string:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. –†–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            return
        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏, –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        client = TelegramClient(
            StringSession(session_string), 
            config.TELEGRAM_API_ID, 
            config.TELEGRAM_API_HASH,
            device_model="HR Vision Agent",
            system_version="Windows 11",
            app_version="1.0.0"
        )
    # --- –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–ï–ô ---

    try:
        # `async with` —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        async with client:
            last_init_date = db.get_last_initialization_date()
            today = date.today()

            # --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
            if last_init_date is None or last_init_date < today:
                await initialize_first_run_of_day(client)
                return

            print("\n--- ‚ú® –ó–ê–ü–£–°–ö HR VISION AGENT (–†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú) ‚ú® ---\n")
            
            me = await client.get_me()
            my_id = me.id
            print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏: {me.first_name} (ID: {my_id})")

            target_chats = db.get_target_chats()
            if not target_chats:
                print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            keyword_triggers = db.get_keyword_triggers()
            all_messages_for_lead_hunter = []
            
            print("\n--- üöÄ –ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è) ---")
            for chat_info in target_chats:
                processed_messages = await telegram_processor.process_chat_for_engagement(
                    client, chat_info, my_id, keyword_triggers
                )
                if processed_messages:
                    all_messages_for_lead_hunter.extend(processed_messages)
            
            print("\n--- ‚úÖ –í—Å–µ —á–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã '–ê–≥–µ–Ω—Ç–æ–º –≤–ª–∏—è–Ω–∏—è' ---")

            if all_messages_for_lead_hunter:
                print("\n--- üïµÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ '–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ª–∏–¥–∞–º–∏' –ø–æ –≤—Å–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º ---")
                from components import lead_hunter_service 
                await lead_hunter_service.find_and_process_leads(client, all_messages_for_lead_hunter)
                print("\n--- ‚úÖ –ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω ---")
            else:
                print("\n--- ‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ---")

            print("\n--- üèÅ –†–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        config.validate_config()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
        if hasattr(db, 'init_db'):
            db.init_db()
        asyncio.run(main())
    except ValueError as e:
        print(e)
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")