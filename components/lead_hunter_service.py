from . import ai_processor
from . import approval_service

async def find_and_process_leads(client, messages):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è "–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ª–∏–¥–∞–º–∏".
    1. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª–∏–¥—ã.
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    if not messages:
        # –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è main.py —É–∂–µ –¥–µ–ª–∞–µ—Ç —Ç–∞–∫—É—é.
        return

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤
    print("  üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (–ø–æ–∏—Å–∫ –ª–∏–¥–æ–≤)...")
    lead_decisions = await ai_processor.get_lead_decisions(messages)
    
    if not lead_decisions:
        print("  ‚úÖ AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ—à–µ–Ω–∏–π.")
        return

    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ª–∏–¥–∞–º–∏
    hot_leads = [d for d in lead_decisions if d.get('lead_type') == 'hot_lead']
    cold_leads = [d for d in lead_decisions if d.get('lead_type') == 'cold_lead']

    if not hot_leads and not cold_leads:
        print("  ‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return

    print(f"  üî• –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤: {len(hot_leads)}. ‚ùÑÔ∏è –ù–∞–π–¥–µ–Ω–æ —Ö–æ–ª–æ–¥–Ω—ã—Ö: {len(cold_leads)}.")

    all_leads = hot_leads + cold_leads
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ–≥–æ ID
    message_map = {msg.id: msg for msg in messages}

    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª–∏–¥
    for lead_decision in all_leads:
        message_id = lead_decision.get('message_id')
        target_message = message_map.get(message_id)

        if not target_message or not hasattr(target_message, 'sender') or not target_message.sender:
            print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä.")
            continue
        
        # 4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"  ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏–¥–∞ (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id})...")
        generated_pitch = await ai_processor.generate_lead_outreach_message(target_message)

        if not generated_pitch or not generated_pitch.get('pitch_text'):
            print(f"  ‚ö†Ô∏è AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ª–∏–¥–∞ {message_id}.")
            continue

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–æ—Ä–∫–µ—Ä—É –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        lead_payload = {
            'action_type': 'lead_outreach', # –ù–æ–≤—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
            'lead_type': lead_decision.get('lead_type'),
            'lead_user_id': target_message.sender.id,
            'lead_username': target_message.sender.username,
            'lead_first_name': target_message.sender.first_name,
            'original_message_text': target_message.text,
            'original_message_id': target_message.id,
            'source_chat_id': target_message.chat_id,
            'pitch_text': generated_pitch.get('pitch_text')
        }
        
        print(f"  üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ '{lead_payload['lead_first_name']}' ({lead_payload['lead_type']}) –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        approval_service.send_action_for_approval(lead_payload)