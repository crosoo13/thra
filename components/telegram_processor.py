# –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ
# from datetime import datetime, timezone
# from . import database_manager as db
# from . import ai_processor
# from . import approval_service

async def process_chat(client, chat_info, prompt_template, prompt_name, my_id):
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –Ω–æ–≤–æ–π –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –ª–æ–≥–∏–∫–æ–π AI.
    """
    original_chat_id = chat_info['chat_id']
    chat_type = chat_info.get('chat_type', 'group')
    processing_id = original_chat_id

    try:
        print(f"\n‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞: {original_chat_id} (—Ç–∏–ø: {chat_type})")
        entity = await client.get_entity(original_chat_id)

        if chat_type == 'channel':
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                entity = await client.get_entity(processing_id)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {processing_id}")
            else:
                print(f"  ‚ö†Ô∏è –î–ª—è –∫–∞–Ω–∞–ª–∞ {original_chat_id} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return

        last_id = db.get_last_message_id(processing_id)
        today_start_utc = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)

        print(f"  ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î: {last_id}")
        print("  üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –°–ï–ì–û–î–ù–Ø...")

        messages_to_process = []
        newest_message_id = last_id

        async for message in client.iter_messages(entity, offset_date=today_start_utc, reverse=True):
            if message.id <= last_id:
                continue
            if message.sender_id == my_id:
                continue
            if message and message.text:
                messages_to_process.append(message)
                if message.id > newest_message_id:
                    newest_message_id = message.id

        if not messages_to_process:
            print("  ‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
            return

        print(f"  üì© –ù–∞–π–¥–µ–Ω–æ {len(messages_to_process)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω–≤–µ–π–µ—Ä–∞...")

        # ===================================================================
        # üëáüëáüëá –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ó–û–í–ê AI üëáüëáüëá
        # ===================================================================

        # –≠–¢–ê–ü 1: –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –æ—Ç "—Å–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫–∞"
        routing_decisions = await ai_processor.get_routing_decisions(messages_to_process)

        if not routing_decisions:
            print("  ‚ÑπÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        final_actions_to_approve = []
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
        message_map = {msg.id: msg for msg in messages_to_process}

        # –≠–¢–ê–ü 2: –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ—à–µ–Ω–∏—è–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Ö, —á—Ç–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ "reply"
        for decision in routing_decisions:
            if decision.get('decision') == 'reply':
                message_id = decision.get('message_id')
                persona = decision.get('persona')
                message_to_reply = message_map.get(message_id)

                if message_to_reply and persona:
                    # –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–∏—á–Ω–æ—Å—Ç–∏
                    final_action = await ai_processor.generate_final_reply(message_to_reply, persona, processing_id)
                    if final_action:
                        final_actions_to_approve.append(final_action)
                else:
                    print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è ({message_id}) –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞ ({persona})")

        # ===================================================================
        # üëÜüëÜüëÜ –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò üëÜüëÜüëÜ
        # ===================================================================

        if not final_actions_to_approve:
            print("  ‚úÖ AI –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        else:
            print(f"  üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(final_actions_to_approve)} –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
            for action in final_actions_to_approve:
                approval_service.send_action_for_approval(action)

        if newest_message_id > last_id:
            db.update_last_message_id(processing_id, newest_message_id)

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {original_chat_id}: {e}")
    finally:
        print("-" * 50)