# ai_processor.py
import json
import google.generativeai as genai
from . import config

try:
    genai.configure(api_key=config.GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel(config.GEMINI_MODEL_NAME)
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini AI: {e}")
    exit()

async def get_ai_actions(messages, chat_id, prompt_template: str, prompt_name: str):
    messages_for_prompt = [
        {"message_id": msg.id, "text": msg.text.strip()}
        for msg in messages if msg.text and not msg.text.isspace()
    ]

    if not messages_for_prompt:
        print("   ‚ÑπÔ∏è –í –ø–∞–∫–µ—Ç–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return []

    messages_json = json.dumps(messages_for_prompt, ensure_ascii=False, indent=4)
    full_prompt = prompt_template.replace('{messages_for_prompt}', messages_json)

    try:
        print(f"   ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(messages_for_prompt)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Gemini...")
        response = await gemini_model.generate_content_async(full_prompt)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("\n--- üì• –û—Ç–≤–µ—Ç –æ—Ç Gemini AI ---\n", response.text, "\n----------------------------\n")

        cleaned_response_text = response.text.strip().removeprefix('```json').removesuffix('```')
        ai_actions = json.loads(cleaned_response_text)

        # –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        for action in ai_actions:
            action.update({
                'target_chat_id': chat_id,
                'action_type': 'reply',
                'model_version': config.GEMINI_MODEL_NAME,
                'prompt_version': prompt_name
            })
        return ai_actions

    except json.JSONDecodeError:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON. –û—Ç–≤–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ.")
        return []
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return []