from supabase import create_client, Client
from datetime import date
from . import config

try:
	supabase: Client = create_client(config.SUPABASE_URL, config.SUPABASE_KEY)
	print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase.")
except Exception as e:
	print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
	exit()

def get_session_string():
	print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Supabase...")
	try:
		response = supabase.table('sessions').select("session_file").eq('agent_name', config.SESSION_NAME).single().execute()
		if response.data and response.data.get('session_file'):
			print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Supabase.")
			return response.data.get('session_file')
		print("‚ÑπÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase.")
		return None
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ Supabase: {e}")
		return None

def save_session_string(session_string):
	print("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ Supabase...")
	try:
		supabase.table('sessions').upsert({'agent_name': config.SESSION_NAME, 'session_file': session_string}).execute()
		print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase.")
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ Supabase: {e}")

def get_target_chats():
	print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ Supabase...")
	try:
		response = supabase.table('target_chats').select('chat_id, chat_type').execute()
		chats = response.data or []
		print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.")
		return chats
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ Supabase: {e}")
		return []

def get_last_message_id(chat_id):
	try:
		response = supabase.table('channel_state').select('last_message_id').eq('chat_id', chat_id).single().execute()
		return int(response.data.get('last_message_id', 0)) if response.data else 0
	except Exception:
		return 0

def update_last_message_id(chat_id, message_id):
	print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ {message_id}...")
	try:
		supabase.table('channel_state').upsert({'chat_id': chat_id, 'last_message_id': message_id}).execute()
		print(f"‚úÖ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
	except Exception as e:
		print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

def get_prompt_template(prompt_name: str):
	print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}' –∏–∑ Supabase...")
	try:
		response = supabase.table('prompts').select('content').eq('name', prompt_name).single().execute()
		if response.data:
			print(f"‚úÖ –ü—Ä–æ–º–ø—Ç '{prompt_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
			return response.data['content'].replace('\r\n', '\n')
		print(f"‚ùå –ü—Ä–æ–º–ø—Ç '{prompt_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase.")
		return None
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}': {e}")
		return None

def get_examples_by_status(prompt_name: str, status: str, limit: int = 10):
	print(f"üîÑ –ó–∞–ø—Ä–æ—Å {limit} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –¥–ª—è –ø—Ä–æ–º—Ç–∞ '{prompt_name}'...")
	try:
		response = supabase.table('ai_suggestions_log').select(
			"original_message_text, ai_generated_text"
		).eq(
			'status', status
		).eq(
			'prompt_version', prompt_name
		).order(
			'created_at', desc=True
		).limit(
			limit
		).execute()

		if response.data:
			print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –ø—Ä–∏–º–µ—Ä–æ–≤.")
			return list(reversed(response.data))
		return []
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è '{prompt_name}' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {e}")
		return []

def get_pending_actions():
	try:
		response = supabase.table('pending_actions').select('*').eq('is_completed', False).execute()
		if response.data:
			return response.data
		return []
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ Supabase: {e}")
		return []

def mark_action_as_completed(action_id):
	try:
		supabase.table('pending_actions').update({'is_completed': True}).eq('id', action_id).execute()
		return True
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_id} –≤ Supabase: {e}")
		return False

def is_agent_active():
	print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞ –≤ Supabase...")
	try:
		response = supabase.table('agent_status').select("is_active").eq('id', 1).single().execute()
		if response.data and 'is_active' in response.data:
			is_active = response.data['is_active']
			if is_active:
				print("‚úÖ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.")
				return True
			else:
				print("‚èπÔ∏è –ê–≥–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
				return False
		print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
		return False
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
		return False

def get_last_initialization_date():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞."""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    try:
        response = supabase.table('agent_status').select("last_initialization_date").eq('id', 1).single().execute()
        if response.data and response.data.get('last_initialization_date'):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É 'YYYY-MM-DD' –≤ –æ–±—ä–µ–∫—Ç date
            return date.fromisoformat(response.data['last_initialization_date'])
        print("‚ÑπÔ∏è –î–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def update_initialization_date():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    today_str = date.today().isoformat()
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ {today_str}...")
    try:
        supabase.table('agent_status').update({'last_initialization_date': today_str}).eq('id', 1).execute()
        print("‚úÖ –î–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")