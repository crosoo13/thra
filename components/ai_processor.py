# ai_processor.py

import json
import google.generativeai as genai
from . import config
from . import database_manager as db

try:
    genai.configure(api_key=config.GEMINI_API_KEY)
    gemini_flash_model = genai.GenerativeModel(config.GEMINI_FLASH_MODEL_NAME)
    gemini_pro_model = genai.GenerativeModel(config.GEMINI_PRO_MODEL_NAME)
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Gemini Flash –∏ Pro.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini AI: {e}")
    exit()

async def get_routing_decisions(messages):
    """
    –≠–¢–ê–ü 1: –í—ã–∑—ã–≤–∞–µ—Ç Gemini Flash –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
    """
    print("  ü§ñ –≠—Ç–∞–ø 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ Gemini Flash...")
    prompt_template = db.get_prompt_template("router_prompt")
    if not prompt_template:
        print("    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω 'router_prompt' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return []

    messages_for_prompt = [
        {"message_id": msg.id, "text": msg.text.strip()}
        for msg in messages if msg.text and not msg.text.isspace()
    ]

    if not messages_for_prompt:
        return []

    messages_json = json.dumps(messages_for_prompt, ensure_ascii=False, indent=4)
    full_prompt = prompt_template.replace('{messages_for_prompt}', messages_json)

    try:
        response = await gemini_flash_model.generate_content_async(full_prompt)
        cleaned_response_text = response.text.strip().removeprefix('```json').removesuffix('```')
        decisions = json.loads(cleaned_response_text)
        print(f"    ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª {len(decisions)} —Ä–µ—à–µ–Ω–∏–π.")
        return decisions
    except Exception as e:
        print(f"    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
        return []

async def generate_final_reply(conversation_history, persona: str, chat_id: int, my_id: int):
    """
    –≠–¢–ê–ü 2: –í—ã–∑—ã–≤–∞–µ—Ç Gemini Pro –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
    """
    prompt_name = f"{persona.lower()}_prompt"
    print(f"  ü§ñ –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é '{persona}' (–ø—Ä–æ–º–ø—Ç: '{prompt_name}')...")

    prompt_template = db.get_prompt_template(prompt_name)
    if not prompt_template:
        print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç '{prompt_name}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return None

    # --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ú–ï–†–û–í ---
    good_examples = db.get_examples_by_status(prompt_name, status='approved', limit=10)
    good_examples_string = ""
    if good_examples:
        example_texts = [f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ex['original_message_text']}\n–¢–≤–æ–π —É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {ex['ai_generated_text']}" for ex in good_examples if ex.get('original_message_text') and ex.get('ai_generated_text')]
        if example_texts:
            good_examples_string = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–≤–æ–∏—Ö —É–¥–∞—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —ç—Ç–æ–π —Ä–æ–ª–∏. –ò–∑—É—á–∏ –∏—Ö, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å:\n" + "\n---\n".join(example_texts)

    bad_examples = db.get_examples_by_status(prompt_name, status='declined', limit=10)
    bad_examples_string = ""
    if bad_examples:
        example_texts = [f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ex['original_message_text']}\n–¢–≤–æ–π –ù–ï–£–î–ê–ß–ù–´–ô –æ—Ç–≤–µ—Ç: {ex['ai_generated_text']}" for ex in bad_examples if ex.get('original_message_text') and ex.get('ai_generated_text')]
        if example_texts:
            bad_examples_string = "\n–ê –≤–æ—Ç —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –ù–ï –ù–ê–î–û. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä—ã —Ç–≤–æ–∏—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ò–∑—É—á–∏ –∏—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ—à–∏–±–æ–∫:\n" + "\n---\n".join(example_texts)

    # --- –°–ë–û–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–ú–¢–ê ---
    prompt_with_good = prompt_template.replace('{dynamic_examples}', good_examples_string)
    prompt_with_bad = prompt_with_good.replace('{bad_examples}', bad_examples_string)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ JSON
    history_for_prompt = []
    for msg in conversation_history:
        history_for_prompt.append({
            "id": msg.id,
            "author": "me" if msg.sender_id == my_id else "user",
            "text": msg.text.strip() if msg.text else ""
        })
    
    history_json_string = json.dumps(history_for_prompt, ensure_ascii=False, indent=4)
    full_prompt = prompt_with_bad.replace('{conversation_history_json}', history_json_string)
    
    # --- –í–´–ó–û–í AI –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ---
    try:
        response = await gemini_pro_model.generate_content_async(full_prompt)
        print("\n--- üì• –û—Ç–≤–µ—Ç –æ—Ç Gemini Pro ---\n", response.text, "\n--------------------------\n")

        cleaned_response_text = response.text.strip().removeprefix('```json').removesuffix('```')
        ai_actions = json.loads(cleaned_response_text)

        if not ai_actions:
            print(f"    ‚ÑπÔ∏è –ü–µ—Ä—Å–æ–Ω–∞ '{persona}' —Ä–µ—à–∏–ª–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return None

        action = ai_actions[0]
        
        # –í–∞–∂–Ω–æ: —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å - —ç—Ç–æ —Ç–µ–∫—Å—Ç –ü–û–°–õ–ï–î–ù–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥–µ
        original_message_text = conversation_history[-1].text if conversation_history else ""

        action.update({
            'target_chat_id': chat_id,
            'action_type': 'reply',
            'model_version': config.GEMINI_PRO_MODEL_NAME,
            'prompt_version': prompt_name,
            'original_message_text': original_message_text
        })
        return action

    except json.JSONDecodeError:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: Gemini Pro –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON. –û—Ç–≤–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ.")
        return None
    except Exception as e:
        print(f"    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None