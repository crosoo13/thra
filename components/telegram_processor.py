# 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from datetime import datetime, timezone
from . import database_manager as db
from . import ai_processor
from . import approval_service

async def process_chat(client, chat_info, prompt_template, prompt_name, my_id):
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞: –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    original_chat_id = chat_info['chat_id']
    chat_type = chat_info.get('chat_type', 'group')
    processing_id = original_chat_id

    try:
        print(f"\n‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞: {original_chat_id} (—Ç–∏–ø: {chat_type})")
        entity = await client.get_entity(original_chat_id)

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª, –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if chat_type == 'channel':
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                entity = await client.get_entity(processing_id)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {processing_id}")
            else:
                print(f"  ‚ö†Ô∏è –î–ª—è –∫–∞–Ω–∞–ª–∞ {original_chat_id} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return

        # 2. –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—á–µ—Ä–∞)
        last_id = db.get_last_message_id(processing_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤ UTC, —á—Ç–æ–±—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_start_utc = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        
        print(f"  ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î: {last_id}")
        print("  üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –°–ï–ì–û–î–ù–Ø...")

        messages_to_process = []
        newest_message_id = last_id
        
        # 3. –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –¶–ò–ö–õ: –ò—Å–ø–æ–ª—å–∑—É–µ–º offset_date –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        async for message in client.iter_messages(entity, offset_date=today_start_utc, reverse=True):
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞ –¥–µ–Ω—å
            if message.id <= last_id:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if message.sender_id == my_id:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            if message and message.text:
                messages_to_process.append(message)
                if message.id > newest_message_id:
                    newest_message_id = message.id

        if not messages_to_process:
            print("  ‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.")
            return

        print(f"  üì© –ù–∞–π–¥–µ–Ω–æ {len(messages_to_process)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        
        # --- –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ù–ê –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        KEYWORD_TRIGGERS = ["–º–∞—Å—Å–æ–≤—ã–π", "–º–∞—Å—Å–æ–≤–æ–≥–æ", "–≤–∞—Ö—Ç–æ–π", "–≤–∞—Ö—Ç–æ–≤—ã–º"]
        print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
        for message in messages_to_process:
            if message.text and any(keyword in message.text.lower() for keyword in KEYWORD_TRIGGERS):
                print(f"  üö® –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id} –∏–∑ —á–∞—Ç–∞ {processing_id}!")
                alert_payload = {
                    'action_type': 'keyword_alert',
                    'target_chat_id': processing_id,
                    'original_message_text': message.text,
                    'reply_to_message_id': message.id
                }
                approval_service.send_action_for_approval(alert_payload)
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---
        
        actions = await ai_processor.get_ai_actions(messages_to_process, processing_id, prompt_template, prompt_name)

        if not actions:
            print("  ‚ÑπÔ∏è AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        else:
            print(f"  ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
            for action in actions:
                original_text = next((msg.text for msg in messages_to_process if msg.id == action.get('reply_to_message_id')), "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                action['original_message_text'] = original_text
                approval_service.send_action_for_approval(action)

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ
        if newest_message_id > last_id:
            db.update_last_message_id(processing_id, newest_message_id)

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {original_chat_id}: {e}")
    finally:
        print("-" * 50)