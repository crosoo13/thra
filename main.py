# main.py
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron).
# –ï–≥–æ –∑–∞–¥–∞—á–∞ - —á–∏—Ç–∞—Ç—å —á–∞—Ç—ã, –Ω–∞—Ö–æ–¥–∏—Ç—å —Ü–µ–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –≤–æ—Ä–∫–µ—Ä—É.

import asyncio
from datetime import date
from telethon.sync import TelegramClient
from telethon.sessions import StringSession

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã ---
from components import config
from components import database_manager as db
from components import telegram_processor
# –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ, –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

async def initialize_first_run_of_day(client):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è.
    (–≠—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    print("\n--- üåÖ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö –î–ù–Ø: –†–ï–ñ–ò–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ---\n")
    target_chats = db.get_target_chats()
    if not target_chats:
        print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    for chat_info in target_chats:
        chat_id = chat_info['chat_id']
        processing_id = chat_id
        print(f"‚ñ∂Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞: {chat_id}")
        try:
            entity = await client.get_entity(chat_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º, —Ä–∞–±–æ—Ç–∞–µ–º —Å —á–∞—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                print(f"  ‚úÖ –ö–∞–Ω–∞–ª {chat_id} —Å–≤—è–∑–∞–Ω —Å —á–∞—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {processing_id}.")
                entity_to_read = await client.get_entity(processing_id)
            else:
                entity_to_read = entity

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º ID –≤ –±–∞–∑–µ
            async for last_message in client.iter_messages(entity_to_read, limit=1):
                db.update_last_message_id(processing_id, last_message.id)
                break
            else:
                print(f"  ‚ö†Ô∏è –í —á–∞—Ç–µ {processing_id} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")

    db.update_initialization_date()
    print("\n--- ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞-–æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ–ª—è.
    """
    if not db.is_agent_active():
        return
    
    last_init_date = db.get_last_initialization_date()
    today = date.today()

    session_string = db.get_session_string()
    if not session_string:
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
        return

    try:
        async with TelegramClient(StringSession(session_string), config.TELEGRAM_API_ID, config.TELEGRAM_API_HASH) as client:
            # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            if last_init_date is None or last_init_date < today:
                await initialize_first_run_of_day(client)
                return

            print("\n--- ‚ú® –ó–ê–ü–£–°–ö HR VISION AGENT (–†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú) ‚ú® ---\n")
            
            if not await client.is_user_authorized():
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
                return

            me = await client.get_me()
            my_id = me.id
            print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏: {me.first_name} (ID: {my_id})")

            # –í–ê–ñ–ù–û: –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∞,
            # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Railway.
            
            target_chats = db.get_target_chats()
            if not target_chats:
                print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –û–î–ò–ù –†–ê–ó –≤ –Ω–∞—á–∞–ª–µ
            keyword_triggers = db.get_keyword_triggers()

            # --- –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î –ö –û–ë–†–ê–ë–û–¢–ö–ï ---

            # 1. –ì–æ—Ç–æ–≤–∏–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è "–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ª–∏–¥–∞–º–∏"
            all_messages_for_lead_hunter = []
            
            print("\n--- üöÄ –ù–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è) ---")
            for chat_info in target_chats:
                # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π.
                # –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞.
                processed_messages = await telegram_processor.process_chat_for_engagement(
                    client, chat_info, my_id, keyword_triggers
                )
                
                # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è "–û—Ö–æ—Ç–Ω–∏–∫–∞"
                if processed_messages:
                    all_messages_for_lead_hunter.extend(processed_messages)
            
            print("\n--- ‚úÖ –í—Å–µ —á–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã '–ê–≥–µ–Ω—Ç–æ–º –≤–ª–∏—è–Ω–∏—è' ---")

            # 4. –ü–û–°–õ–ï —Ü–∏–∫–ª–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É ("–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ª–∏–¥–∞–º–∏") –Ω–∞ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if all_messages_for_lead_hunter:
                print("\n--- üïµÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ '–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ª–∏–¥–∞–º–∏' –ø–æ –≤—Å–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º ---")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä—è–º–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                # –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥ —á–∏—Å—Ç—ã–º.
                from components import lead_hunter_service 
                await lead_hunter_service.find_and_process_leads(client, all_messages_for_lead_hunter)
                
                print("\n--- ‚úÖ –ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω ---")
            else:
                print("\n--- ‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ---")

            print("\n--- üèÅ –†–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        config.validate_config()
        asyncio.run(main())
    except ValueError as e:
        print(e)
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")