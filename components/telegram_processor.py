from datetime import datetime, timezone, timedelta
from . import database_manager as db
from . import ai_processor
from . import approval_service

async def process_chat_for_engagement(client, chat_info, my_id, keyword_triggers):
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –û–î–ò–ù —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è ("–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è").
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.
    """
    # --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–ò–ú–ò–¢–ê –ò–°–¢–û–†–ò–ò ---
    # üëá –í–æ—Ç –Ω–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –ú–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ.
    MESSAGE_HISTORY_LIMIT = 7 
    # ------------------------------------

    original_chat_id = chat_info['chat_id']
    chat_type = chat_info.get('chat_type', 'group')
    processing_id = original_chat_id

    try:
        print(f"\n‚ñ∂Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è): {original_chat_id} (—Ç–∏–ø: {chat_type})")

        # --- –ü–†–û–í–ï–†–ö–ê –ß–ê–°–û–í–û–ì–û –õ–ò–ú–ò–¢–ê ---
        last_post_time = db.get_last_post_time(processing_id)
        if last_post_time:
            time_since_last_post = datetime.now(timezone.utc) - last_post_time
            if time_since_last_post < timedelta(hours=1):
                print(f" 	‚è≥ –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–ª—è —á–∞—Ç–∞ {processing_id} –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                print("-" * 50)
                return None
        
        entity = await client.get_entity(original_chat_id)

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ —á–∞—Ç–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if chat_type == 'channel':
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                entity = await client.get_entity(processing_id)
                print(f" 	‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {processing_id}")
            else:
                print(f" 	‚ö†Ô∏è –î–ª—è –∫–∞–Ω–∞–ª–∞ {original_chat_id} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_id = db.get_last_message_id(processing_id)
        today_start_utc = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        
        print(f" 	ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î: {last_id}")
        print(" 	üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –°–ï–ì–û–î–ù–Ø...")

        messages_to_process = []
        newest_message_id = last_id
        
        async for message in client.iter_messages(entity, offset_date=today_start_utc, reverse=True):
            if message.id <= last_id:
                continue
            if message.sender_id == my_id:
                continue
            if message and message.text:
                messages_to_process.append(message)
                if message.id > newest_message_id:
                    newest_message_id = message.id

        if not messages_to_process:
            if newest_message_id > last_id:
                db.update_last_message_id(processing_id, newest_message_id)
            print(" 	‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.")
            return None

        print(f" 	üì© –ù–∞–π–¥–µ–Ω–æ {len(messages_to_process)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        
        # --- –ë–õ–û–ö –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---
        if len(messages_to_process) > 10:
            print(f" 	‚úÇÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç –≤–∑—è—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10.")
            messages_for_ai_analysis = messages_to_process[-10:]
        else:
            messages_for_ai_analysis = messages_to_process
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        if keyword_triggers:
            print(" 	üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
            for message in messages_to_process:
                if message.text and any(keyword.lower() in message.text.lower() for keyword in keyword_triggers):
                    print(f" 	üö® –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}!")
                    alert_payload = {
                        'action_type': 'keyword_alert',
                        'target_chat_id': processing_id,
                        'original_message_text': message.text,
                        'reply_to_message_id': message.id
                    }
                    approval_service.send_action_for_approval(alert_payload)
        else:
            print(" 	‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")

        # 2. –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω–≤–µ–π–µ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        print(" 	ü§ñ –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω–≤–µ–π–µ—Ä–∞ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è)...")
        routing_decisions = await ai_processor.get_routing_decisions(messages_for_ai_analysis)

        if routing_decisions:
            decisions_to_reply = [d for d in routing_decisions if d.get('decision') == 'reply']
            
            final_decision = None
            if decisions_to_reply:
                if len(decisions_to_reply) > 1:
                    print(f" 	‚ö†Ô∏è AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª {len(decisions_to_reply)} –æ—Ç–≤–µ—Ç–æ–≤. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π, —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É.")
                final_decision = decisions_to_reply[0]

            if final_decision:
                message_id_to_reply = final_decision.get('message_id')
                persona = final_decision.get('persona')
                # –í–∞–∂–Ω–æ: –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
                message_map = {msg.id: msg for msg in messages_to_process}
                target_message = message_map.get(message_id_to_reply)

                # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ë–õ–û–ö–ê –ü–†–û–í–ï–†–ö–ò ---
                if target_message and db.was_user_contacted_today(target_message.sender_id):
                    print(f" 	üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_message.sender_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –æ—Ç–≤–µ—Ç —Å–µ–≥–æ–¥–Ω—è. –û—Ç–≤–µ—Ç –æ—Ç '–ê–≥–µ–Ω—Ç–∞ –≤–ª–∏—è–Ω–∏—è' –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê –ü–†–û–í–ï–†–ö–ò ---
                
                elif target_message and persona: # –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ 'elif'
                    
                    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –ü–ï–†–ï–ü–ò–°–ö–ò ---
                    print(f" 	üîÑ –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {target_message.id}...")
                    try:
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–ª AI
                        target_index = messages_for_ai_analysis.index(target_message)
                        # –ë–µ—Ä–µ–º —Å—Ä–µ–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
                        history_slice = messages_for_ai_analysis[:target_index + 1]
                        # –ò–∑ —ç—Ç–æ–≥–æ —Å—Ä–µ–∑–∞ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        conversation_history = history_slice[-MESSAGE_HISTORY_LIMIT:]
                    except ValueError:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –±–µ—Ä–µ–º –µ–≥–æ –æ–¥–Ω–æ
                        conversation_history = [target_message]
                    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

                    print(f" 	‚úÖ –°–æ–±—Ä–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏–º–∏—Ç: {MESSAGE_HISTORY_LIMIT}).")

                    final_action = await ai_processor.generate_final_reply(conversation_history, persona, processing_id, my_id)
                    
                    if final_action:
                        print(" 	üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω 1 –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
                        approval_service.send_action_for_approval(final_action)
                    else:
                        print(" 	‚úÖ AI —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            else:
                print(" 	‚úÖ AI (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è) –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É—è ID –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞)
        if newest_message_id > last_id:
            db.update_last_message_id(processing_id, newest_message_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è "–û—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞ –ª–∏–¥–∞–º–∏"
        return messages_to_process

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {original_chat_id}: {e}")
        return None
    finally:
        print("-" * 50)