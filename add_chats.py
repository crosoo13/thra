import os
import asyncio
from dotenv import load_dotenv
from supabase import create_client, Client
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import Channel

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
load_dotenv()

TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
YOUR_PHONE_NUMBER = os.getenv('YOUR_PHONE_NUMBER')
SESSION_NAME = "hr_vision_agent_session"

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

INPUT_FILE = "tg.txt"

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
    exit() # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# --- 3. –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–ï–ô ---
def get_session_from_supabase():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ Supabase."""
    try:
        response = supabase.table('sessions').select("session_file").eq('agent_name', SESSION_NAME).single().execute()
        if response.data:
            print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Supabase.")
            return response.data.get('session_file')
    except Exception as e:
        print(f"INFO: –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è. –û—à–∏–±–∫–∞: {e}")
    return None

# --- 4. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –° –û–¢–õ–ê–î–ö–û–ô ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤...")

    session_string = get_session_from_supabase()
    if not session_string:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Ö–æ–¥–∞.")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ.")
        return

    async with TelegramClient(StringSession(session_string), TELEGRAM_API_ID, TELEGRAM_API_HASH) as client:
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram!")

        if not os.path.exists(INPUT_FILE):
            print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏.")
            return

        with open(INPUT_FILE, 'r') as f:
            for line in f:
                username = line.strip()
                if not username:
                    continue

                print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞: {username} ---")

                try:
                    entity = await client.get_entity(username)
                    
                    chat_id = entity.id
                    chat_type = None

                    if isinstance(entity, Channel):
                        chat_id = int(f"-100{entity.id}")
                        chat_type = 'group' if entity.megagroup else 'channel'
                    else:
                        print(f"üü° {username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue

                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID: {chat_id}")
                    print(f"‚úÖ –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: {chat_type}")
                    
                    # --- –ë–õ–û–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---
                    print("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
                    
                    # 1. –ò—â–µ–º –ø–æ chat_id
                    existing_by_id = supabase.table("target_chats").select("*").eq("chat_id", chat_id).execute()
                    if existing_by_id.data:
                        print(f"üü° –ù–ê–ô–î–ï–ù–ê –∑–∞–ø–∏—Å—å –ø–æ chat_id={chat_id}: {existing_by_id.data[0]}")
                    else:
                        print(f"üü¢ –ó–∞–ø–∏—Å—å —Å chat_id={chat_id} –ù–ï –Ω–∞–π–¥–µ–Ω–∞.")

                    # 2. –ò—â–µ–º –ø–æ username
                    existing_by_username = supabase.table("target_chats").select("*").eq("username", username).execute()
                    if existing_by_username.data:
                        print(f"üü° –ù–ê–ô–î–ï–ù–ê –∑–∞–ø–∏—Å—å –ø–æ username='{username}': {existing_by_username.data[0]}")
                    else:
                        print(f"üü¢ –ó–∞–ø–∏—Å—å —Å username='{username}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞.")
                    # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---

                    # --- –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É ---
                    record_to_upsert = {
                        "username": username,
                        "chat_id": chat_id,
                        "chat_type": chat_type
                    }
                    print(f"[–î–ï–ô–°–¢–í–ò–ï] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è upsert —Å –¥–∞–Ω–Ω—ã–º–∏: {record_to_upsert}")
                    
                    response = supabase.table("target_chats").upsert(record_to_upsert).execute()

                    if response.data:
                         print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {username} | {chat_id} | –¢–∏–ø: {chat_type}")
                    else:
                         # Upsert –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
                         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                         if hasattr(response, 'error') and response.error:
                             print(f"‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ upsert: {response.error}")
                         else:
                             print("üîµ –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ upsert –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫.")


                except ValueError:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ: {username}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–æ—Å—Ç—É–ø (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å).")
                except Exception as e:
                    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –æ—à–∏–±–∫–∞ —Å {username}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")


    print("\n–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())