from datetime import datetime, timezone, timedelta
from . import database_manager as db
from . import ai_processor
from . import approval_service

async def process_chat_for_engagement(client, chat_info, my_id, keyword_triggers):
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –û–î–ò–ù —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è ("–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è").
    –õ–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.
    –í –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    original_chat_id = chat_info['chat_id']
    chat_type = chat_info.get('chat_type', 'group')
    processing_id = original_chat_id

    try:
        print(f"\n‚ñ∂Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è): {original_chat_id} (—Ç–∏–ø: {chat_type})")

        # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–†–û–í–ï–†–ö–ê –ß–ê–°–û–í–û–ì–û –õ–ò–ú–ò–¢–ê ---
        last_post_time = db.get_last_post_time(processing_id)
        if last_post_time:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω
            time_since_last_post = datetime.now(timezone.utc) - last_post_time
            if time_since_last_post < timedelta(hours=1):
                print(f"  ‚è≥ –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–ª—è —á–∞—Ç–∞ {processing_id} –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                print("-" * 50)
                return None # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

        entity = await client.get_entity(original_chat_id)

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ —á–∞—Ç–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if chat_type == 'channel':
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                entity = await client.get_entity(processing_id)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {processing_id}")
            else:
                print(f"  ‚ö†Ô∏è –î–ª—è –∫–∞–Ω–∞–ª–∞ {original_chat_id} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_id = db.get_last_message_id(processing_id)
        today_start_utc = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        
        print(f"  ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î: {last_id}")
        print("  üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –°–ï–ì–û–î–ù–Ø...")

        messages_to_process = []
        newest_message_id = last_id
        
        async for message in client.iter_messages(entity, offset_date=today_start_utc, reverse=True):
            if message.id <= last_id:
                continue
            if message.sender_id == my_id:
                continue
            if message and message.text:
                messages_to_process.append(message)
                if message.id > newest_message_id:
                    newest_message_id = message.id

        if not messages_to_process:
            print("  ‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.")
            return None # <-- –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π

        print(f"  üì© –ù–∞–π–¥–µ–Ω–æ {len(messages_to_process)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        
        # --- –í–°–Ø –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –û–°–¢–ê–ï–¢–°–Ø –ù–ï–ò–ó–ú–ï–ù–ù–û–ô ---

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if keyword_triggers:
            print("  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
            for message in messages_to_process:
                if message.text and any(keyword.lower() in message.text.lower() for keyword in keyword_triggers):
                    print(f"  üö® –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}!")
                    alert_payload = {
                        'action_type': 'keyword_alert',
                        'target_chat_id': processing_id,
                        'original_message_text': message.text,
                        'reply_to_message_id': message.id
                    }
                    approval_service.send_action_for_approval(alert_payload)
        else:
            print("  ‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")

        # 2. –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω–≤–µ–π–µ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        print("  ü§ñ –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω–≤–µ–π–µ—Ä–∞ (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è)...")
        routing_decisions = await ai_processor.get_routing_decisions(messages_to_process)

        if routing_decisions:
            decisions_to_reply = [d for d in routing_decisions if d.get('decision') == 'reply']
            
            final_decision = None
            if decisions_to_reply:
                if len(decisions_to_reply) > 1:
                    print(f"  ‚ö†Ô∏è AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª {len(decisions_to_reply)} –æ—Ç–≤–µ—Ç–æ–≤. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π, —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—É.")
                final_decision = decisions_to_reply[0]

            if final_decision:
                message_id_to_reply = final_decision.get('message_id')
                persona = final_decision.get('persona')
                message_map = {msg.id: msg for msg in messages_to_process}
                target_message = message_map.get(message_id_to_reply)

                if target_message and persona:
                    print(f"  üîÑ –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {target_message.id}...")
                    conversation_history = []
                    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ 6 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for msg in client.iter_messages(entity, limit=6, offset_id=target_message.id + 1):
                        conversation_history.append(msg)
                    
                    conversation_history.reverse()
                    
                    print(f"  ‚úÖ –°–æ–±—Ä–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(conversation_history)} —Å–æ–æ–±—â–µ–Ω–∏–π.")

                    final_action = await ai_processor.generate_final_reply(conversation_history, persona, processing_id, my_id)
                    
                    if final_action:
                        print("  üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω 1 –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
                        approval_service.send_action_for_approval(final_action)
                    else:
                        print("  ‚úÖ AI —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.")
            else:
                print("  ‚úÖ AI (–ê–≥–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è) –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if newest_message_id > last_id:
            db.update_last_message_id(processing_id, newest_message_id)

        # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–≥ –∏—Ö –ø–µ—Ä–µ–¥–∞—Ç—å "–û—Ö–æ—Ç–Ω–∏–∫—É –∑–∞ –ª–∏–¥–∞–º–∏"
        return messages_to_process

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {original_chat_id}: {e}")
        return None # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    finally:
        print("-" * 50)