# components/database_manager.py - –ù–û–í–´–ô –ö–û–î –î–õ–Ø NEON

import psycopg2
import psycopg2.extras  # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
from datetime import date, datetime
from . import config

def _get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Neon."""
    try:
        conn = psycopg2.connect(config.DATABASE_URL)
        return conn
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon: {e}")
        exit()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π ---

def get_session_string():
    print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Neon...")
    sql = "SELECT session_file FROM public.sessions WHERE agent_name = %s LIMIT 1"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (config.SESSION_NAME,))
                result = cur.fetchone()
                if result:
                    print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Neon.")
                    return result[0]
                print("‚ÑπÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Neon.")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ Neon: {e}")
        return None

def save_session_string(session_string):
    print("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ Neon...")
    sql = """
        INSERT INTO public.sessions (agent_name, session_file) 
        VALUES (%s, %s)
        ON CONFLICT (agent_name) 
        DO UPDATE SET session_file = EXCLUDED.session_file;
    """
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (config.SESSION_NAME, session_string))
            conn.commit()
            print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Neon.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ Neon: {e}")

# --- –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ---

def get_target_chats():
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ Neon...")
    sql = "SELECT chat_id, chat_type FROM public.target_chats"
    try:
        with _get_db_connection() as conn:
            # RealDictCursor –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π,
            # –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥.
            with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(sql)
                chats = cur.fetchall()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.")
                return chats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ Neon: {e}")
        return []

def get_last_message_id(chat_id):
    sql = "SELECT last_message_id FROM public.channel_state WHERE chat_id = %s"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (chat_id,))
                result = cur.fetchone()
                return int(result[0]) if result else 0
    except Exception:
        return 0

def update_last_message_id(chat_id, message_id):
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ {message_id}...")
    sql = """
        INSERT INTO public.channel_state (chat_id, last_message_id) 
        VALUES (%s, %s)
        ON CONFLICT (chat_id) 
        DO UPDATE SET last_message_id = EXCLUDED.last_message_id;
    """
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (chat_id, message_id))
            conn.commit()
            print(f"‚úÖ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

def get_last_post_time(chat_id: int) -> datetime | None:
    sql = "SELECT last_agent_post_timestamp FROM public.channel_state WHERE chat_id = %s"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (chat_id,))
                result = cur.fetchone()
                # psycopg2 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∞–π–º—Å—Ç–µ–º–ø –≤ –æ–±—ä–µ–∫—Ç datetime
                return result[0] if result and result[0] else None
    except Exception:
        return None

def update_last_post_time(chat_id: int):
    print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL-—Ñ—É–Ω–∫—Ü–∏—é NOW() –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    sql = """
        INSERT INTO public.channel_state (chat_id, last_agent_post_timestamp) 
        VALUES (%s, NOW())
        ON CONFLICT (chat_id) 
        DO UPDATE SET last_agent_post_timestamp = NOW();
    """
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (chat_id,))
            conn.commit()
            print(f"‚úÖ –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

# --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –ª–æ–≥–∞–º–∏ ---

def get_prompt_template(prompt_name: str):
    print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}' –∏–∑ Neon...")
    sql = "SELECT content FROM public.prompts WHERE name = %s"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (prompt_name,))
                result = cur.fetchone()
                if result:
                    print(f"‚úÖ –ü—Ä–æ–º–ø—Ç '{prompt_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                    return result[0].replace('\r\n', '\n')
                print(f"‚ùå –ü—Ä–æ–º–ø—Ç '{prompt_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Neon.")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}': {e}")
        return None

def get_examples_by_status(prompt_name: str, status: str, limit: int = 5):
    print(f"üîÑ –ó–∞–ø—Ä–æ—Å {limit} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}'...")
    sql = """
        SELECT original_message_text, ai_generated_text 
        FROM public.ai_suggestions_log
        WHERE status = %s AND prompt_version = %s
        ORDER BY created_at DESC
        LIMIT %s
    """
    try:
        with _get_db_connection() as conn:
            with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(sql, (status, prompt_name, limit))
                examples = cur.fetchall()
                if examples:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(examples)} –ø—Ä–∏–º–µ—Ä–æ–≤.")
                    return list(reversed(examples)) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–ø–∏—Å–∫–∞
                return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è '{prompt_name}' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {e}")
        return []

# --- –†–∞–±–æ—Ç–∞ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ ---

def get_pending_actions():
    sql = "SELECT * FROM public.pending_actions WHERE is_completed = FALSE"
    try:
        with _get_db_connection() as conn:
            with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
                cur.execute(sql)
                return cur.fetchall()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ Neon: {e}")
        return []

def mark_action_as_completed(action_id):
    sql = "UPDATE public.pending_actions SET is_completed = TRUE WHERE id = %s"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (action_id,))
            conn.commit()
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_id} –≤ Neon: {e}")
        return False

# --- –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∞–≥–µ–Ω—Ç–∞ ---

def is_agent_active():
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞ –≤ Neon...")
    sql = "SELECT is_active FROM public.agent_status WHERE id = '1'"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql)
                result = cur.fetchone()
                if result:
                    is_active = result[0]
                    if is_active:
                        print("‚úÖ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                        return True
                    else:
                        print("‚èπÔ∏è –ê–≥–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                        return False
                print("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def get_last_initialization_date():
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    sql = "SELECT last_initialization_date FROM public.agent_status WHERE id = '1'"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql)
                result = cur.fetchone()
                if result and result[0]:
                    # psycopg2 —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç date, fromisoformat –Ω–µ –Ω—É–∂–µ–Ω
                    return result[0]
                print("‚ÑπÔ∏è –î–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def update_initialization_date():
    today = date.today()
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ {today.isoformat()}...")
    sql = "UPDATE public.agent_status SET last_initialization_date = %s WHERE id = '1'"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (today,))
            conn.commit()
            print("‚úÖ –î–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ---

def get_keyword_triggers():
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑ Neon...")
    sql = "SELECT keyword FROM public.keyword_triggers"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [('—Å–ª–æ–≤–æ1',), ...] –≤ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ['—Å–ª–æ–≤–æ1', ...]
                keywords = [item[0] for item in cur.fetchall()]
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
                return keywords
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        return []

def was_user_contacted_today(user_id: int) -> bool:
    sql = "SELECT 1 FROM public.daily_user_contacts WHERE user_id = %s AND last_contact_date = %s"
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (user_id, date.today()))
                # –ï—Å–ª–∏ fetchone() —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª, –∑–Ω–∞—á–∏—Ç –∑–∞–ø–∏—Å—å –µ—Å—Ç—å
                return cur.fetchone() is not None
    except Exception:
        return False

def record_user_contact(user_id: int):
    print(f"üîÑ –ó–∞–ø–∏—Å—å –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    sql = """
        INSERT INTO public.daily_user_contacts (user_id, last_contact_date) 
        VALUES (%s, %s)
        ON CONFLICT (user_id) 
        DO UPDATE SET last_contact_date = EXCLUDED.last_contact_date;
    """
    try:
        with _get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, (user_id, date.today()))
            conn.commit()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")