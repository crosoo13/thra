import os
import asyncio
from dotenv import load_dotenv
from supabase import create_client, Client
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import Channel

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
load_dotenv()

TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
YOUR_PHONE_NUMBER = os.getenv('YOUR_PHONE_NUMBER')
SESSION_NAME = "hr_vision_agent_session"

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

# –ò–º—è —Ñ–∞–π–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —á–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏
INPUT_FILE = "tg.txt"

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ---
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")

# --- 3. –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–ï–ô ---
def get_session_from_supabase():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ Supabase."""
    try:
        response = supabase.table('sessions').select("session_file").eq('agent_name', SESSION_NAME).single().execute()
        if response.data:
            print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Supabase.")
            return response.data.get('session_file')
    except Exception:
        print("INFO: –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è.")
    return None

# --- 4. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤...")

    session_string = get_session_from_supabase()
    if not session_string:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Ö–æ–¥–∞.")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ.")
        return

    client = TelegramClient(StringSession(session_string), TELEGRAM_API_ID, TELEGRAM_API_HASH)
    
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    await client.connect()
    if not await client.is_user_authorized():
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç.")
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram!")

    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏.")
        return

    with open(INPUT_FILE, 'r') as f:
        for line in f:
            username = line.strip()
            if not username:
                continue

            try:
                print(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞: {username} ---")
                entity = await client.get_entity(username)
                
                chat_id = entity.id
                chat_type = None

                # --- –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ (–∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞) ---
                if isinstance(entity, Channel):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
                    chat_id = int(f"-100{entity.id}")
                    
                    # –°–≤–æ–π—Å—Ç–≤–æ 'megagroup' —Ä–∞–≤–Ω–æ True –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (—á–∞—Ç–æ–≤) –∏ False –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                    if entity.megagroup:
                        chat_type = 'group'
                    else:
                        chat_type = 'channel'
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Channel (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ã—á–Ω—ã–π —á–∞—Ç –∏–ª–∏ –±–æ—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    print(f"üü° {username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω ID: {chat_id}")
                print(f"‚úÖ –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: {chat_type}")

                # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º 'chat_type' –≤ –∑–∞–ø–∏—Å—å ---
                print(f"–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É...")
                supabase.table("target_chats").upsert({
                    "username": username,
                    "chat_id": chat_id,
                    "chat_type": chat_type  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø
                }).execute()

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {username} | {chat_id} | –¢–∏–ø: {chat_type}")

            except ValueError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ: {username}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–æ—Å—Ç—É–ø.")
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å {username}: {e}")

    await client.disconnect()
    print("\n–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())