import asyncio
from datetime import date
from telethon.sync import TelegramClient
from telethon.sessions import StringSession

from components import config
from components import database_manager as db
from components import telegram_processor
from components import sender_service

async def initialize_first_run_of_day(client):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è.
    –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç last_message_id –Ω–∞ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
    """
    print("\n--- üåÖ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö –î–ù–Ø: –†–ï–ñ–ò–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ---\n")
    target_chats = db.get_target_chats()
    if not target_chats:
        print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return

    for chat_info in target_chats:
        chat_id = chat_info['chat_id']
        processing_id = chat_id # ID –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ channel_state
        print(f"‚ñ∂Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞: {chat_id}")
        try:
            entity = await client.get_entity(chat_id)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, ID –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –¥—Ä—É–≥–∏–º
            if hasattr(entity, 'linked_chat_id') and entity.linked_chat_id:
                processing_id = entity.linked_chat_id
                print(f"  ‚úÖ –ö–∞–Ω–∞–ª {chat_id} —Å–≤—è–∑–∞–Ω —Å —á–∞—Ç–æ–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {processing_id}.")
                entity_to_read = await client.get_entity(processing_id)
            else:
                entity_to_read = entity

            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            # client.iter_messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
            # –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ - —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ.
            async for last_message in client.iter_messages(entity_to_read, limit=1):
                db.update_last_message_id(processing_id, last_message.id)
                break # –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                 print(f"   ‚ö†Ô∏è –í —á–∞—Ç–µ {processing_id} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –ë–î
    db.update_initialization_date()
    print("\n--- ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")


async def main():
    if not db.is_agent_active():
        return
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –î–ê–¢–´ ---
    last_init_date = db.get_last_initialization_date()
    today = date.today()

    session_string = db.get_session_string()
    if not session_string:
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
        return

    try:
        async with TelegramClient(StringSession(session_string), config.TELEGRAM_API_ID, config.TELEGRAM_API_HASH) as client:
            if last_init_date is None or last_init_date < today:
                await initialize_first_run_of_day(client)
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                return

            # --- –°–¢–ê–†–´–ô –ö–û–î (–ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø, –ï–°–õ–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–ì–û–î–ù–Ø –£–ñ–ï –ë–´–õ–ê) ---
            print("\n--- ‚ú® –ó–ê–ü–£–°–ö HR VISION AGENT (–†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú) ‚ú® ---\n")
            
            prompt_name = "hr_assistant_prompt"
            prompt_template = db.get_prompt_template(prompt_name)
            if not prompt_template:
                return

            if not await client.is_user_authorized():
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
                return

            me = await client.get_me()
            my_id = me.id
            print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏: {me.first_name} (ID: {my_id})")

            await sender_service.send_pending_messages(client)
            
            target_chats = db.get_target_chats()
            if not target_chats:
                print("‚ÑπÔ∏è –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            print("\n--- üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤ ---")
            for chat_info in target_chats:
                await telegram_processor.process_chat(client, chat_info, prompt_template, prompt_name, my_id)
            
            print("\n--- ‚úÖ –í—Å–µ —á–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ---\n")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")


if __name__ == "__main__":
    try:
        config.validate_config()
        asyncio.run(main())
    except ValueError as e:
        print(e)
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")