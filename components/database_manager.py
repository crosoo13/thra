# database_manager.py

from supabase import create_client, Client
from . import config

try:
    supabase: Client = create_client(config.SUPABASE_URL, config.SUPABASE_KEY)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
    exit()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π ---

def get_session_string():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ Telegram –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Supabase...")
    try:
        response = supabase.table('sessions').select("session_file").eq('agent_name', config.SESSION_NAME).single().execute()
        if response.data and response.data.get('session_file'):
            print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Supabase.")
            return response.data.get('session_file')
        print("‚ÑπÔ∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase.")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ Supabase: {e}")
        return None

def save_session_string(session_string):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ Telegram –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ Supabase...")
    try:
        supabase.table('sessions').upsert({'agent_name': config.SESSION_NAME, 'session_file': session_string}).execute()
        print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ Supabase: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–∞—Ç–æ–≤ ---

def get_target_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ Supabase...")
    try:
        response = supabase.table('target_chats').select('chat_id, chat_type').execute()
        chats = response.data or []
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.")
        return chats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ Supabase: {e}")
        return []

def get_last_message_id(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    try:
        response = supabase.table('channel_state').select('last_message_id').eq('chat_id', chat_id).single().execute()
        return int(response.data.get('last_message_id', 0)) if response.data else 0
    except Exception:
        # –û—à–∏–±–∫—É –Ω–µ –≤—ã–≤–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ - –Ω–æ—Ä–º–∞
        return 0

def update_last_message_id(chat_id, message_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞."""
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ {message_id}...")
    try:
        supabase.table('channel_state').upsert({'chat_id': chat_id, 'last_message_id': message_id}).execute()
        print(f"‚úÖ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ ---

def get_prompt_template(prompt_name: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏."""
    print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}' –∏–∑ Supabase...")
    try:
        response = supabase.table('prompts').select('content').eq('name', prompt_name).single().execute()
        if response.data:
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç '{prompt_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return response.data['content'].replace('\r\n', '\n')
        print(f"‚ùå –ü—Ä–æ–º–ø—Ç '{prompt_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase.")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞ '{prompt_name}': {e}")
        return None

def get_examples_by_status(prompt_name: str, status: str, limit: int = 10):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É ('approved' –∏–ª–∏ 'declined').
    """
    print(f"üîÑ –ó–∞–ø—Ä–æ—Å {limit} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –¥–ª—è –ø—Ä–æ–º—Ç–∞ '{prompt_name}'...")
    try:
        response = supabase.table('ai_suggestions_log').select(
            "original_message_text, ai_generated_text"
        ).eq(
            'status', status
        ).eq(
            'prompt_version', prompt_name
        ).order(
            'created_at', desc=True
        ).limit(
            limit
        ).execute()

        if response.data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –ø—Ä–∏–º–µ—Ä–æ–≤.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
            return list(reversed(response.data))
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è '{prompt_name}' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {e}")
        return []


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ---

def get_pending_actions():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É."""
    try:
        response = supabase.table('pending_actions').select('*').eq('is_completed', False).execute()
        if response.data:
            return response.data
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ Supabase: {e}")
        return []

def mark_action_as_completed(action_id):
    """–ü–æ–º–µ—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ."""
    try:
        supabase.table('pending_actions').update({'is_completed': True}).eq('id', action_id).execute()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_id} –≤ Supabase: {e}")
        return False